{"ast":null,"code":"import _regeneratorRuntime from \"/home/zimo/zimo-super-admin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/zimo/zimo-super-admin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/home/zimo/zimo-super-admin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/zimo/zimo-super-admin-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/zimo/zimo-super-admin-frontend/src/Components/context/sorting/Sorting.js\";\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nfunction loadServerRows(sortModel, data) {\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      if (sortModel.length === 0) {\n        resolve(data.rows);\n        return;\n      }\n\n      var sortedColumn = sortModel[0];\n\n      var sortedRows = _toConsumableArray(data.rows).sort(function (a, b) {\n        return String(a[sortedColumn.field]).localeCompare(String(b[sortedColumn.field]));\n      });\n\n      if (sortModel[0].sort === 'desc') {\n        sortedRows = sortedRows.reverse();\n      }\n\n      resolve(sortedRows);\n    }, Math.random() * 500 + 100); // simulate network latency\n  });\n}\n\nexport default function ServerSortingGrid() {\n  var _useDemoData = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6\n  }),\n      data = _useDemoData.data;\n\n  var _React$useState = React.useState([{\n    field: 'commodity',\n    sort: 'asc'\n  }]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      sortModel = _React$useState2[0],\n      setSortModel = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      rows = _React$useState4[0],\n      setRows = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      loading = _React$useState6[0],\n      setLoading = _React$useState6[1];\n\n  var handleSortModelChange = function handleSortModelChange(newModel) {\n    setSortModel(newModel);\n  };\n\n  React.useEffect(function () {\n    var active = true;\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var newRows;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              _context.next = 3;\n              return loadServerRows(sortModel, data);\n\n            case 3:\n              newRows = _context.sent;\n\n              if (active) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 6:\n              setRows(newRows);\n              setLoading(false);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n\n    return function () {\n      active = false;\n    };\n  }, [sortModel, data]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    rows: rows,\n    columns: data.columns,\n    sortingMode: \"server\",\n    sortModel: sortModel,\n    onSortModelChange: handleSortModelChange,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/home/zimo/zimo-super-admin-frontend/src/Components/context/sorting/Sorting.js"],"names":["React","DataGrid","useDemoData","loadServerRows","sortModel","data","Promise","resolve","setTimeout","length","rows","sortedColumn","sortedRows","sort","a","b","String","field","localeCompare","reverse","Math","random","ServerSortingGrid","dataSet","rowLength","maxColumns","useState","setSortModel","setRows","loading","setLoading","handleSortModelChange","newModel","useEffect","active","newRows","height","width","columns"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { useDemoData } from '@mui/x-data-grid-generator';\n\nfunction loadServerRows(sortModel, data) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      if (sortModel.length === 0) {\n        resolve(data.rows);\n        return;\n      }\n\n      const sortedColumn = sortModel[0];\n\n      let sortedRows = [...data.rows].sort((a, b) =>\n        String(a[sortedColumn.field]).localeCompare(String(b[sortedColumn.field])),\n      );\n\n      if (sortModel[0].sort === 'desc') {\n        sortedRows = sortedRows.reverse();\n      }\n\n      resolve(sortedRows);\n    }, Math.random() * 500 + 100); // simulate network latency\n  });\n}\n\nexport default function ServerSortingGrid() {\n  const { data } = useDemoData({\n    dataSet: 'Commodity',\n    rowLength: 10,\n    maxColumns: 6,\n  });\n\n  const [sortModel, setSortModel] = React.useState([\n    { field: 'commodity', sort: 'asc' },\n  ]);\n\n  const [rows, setRows] = React.useState([]);\n  const [loading, setLoading] = React.useState(false);\n\n  const handleSortModelChange = (newModel) => {\n    setSortModel(newModel);\n  };\n\n  React.useEffect(() => {\n    let active = true;\n\n    (async () => {\n      setLoading(true);\n      const newRows = await loadServerRows(sortModel, data);\n\n      if (!active) {\n        return;\n      }\n\n      setRows(newRows);\n      setLoading(false);\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [sortModel, data]);\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={data.columns}\n        sortingMode=\"server\"\n        sortModel={sortModel}\n        onSortModelChange={handleSortModelChange}\n        loading={loading}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}